package graphics;
/**
* Canvas
*
* @author: Stephan Jamieson
*
* @version: 1.0
* date: 12.08.2003
*
*/
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.geom.Line2D;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.Transparency;
//
import java.util.Observable;
import java.util.Observer;
//
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
//
public class Canvas extends Component
{

    private DrawingBuffer drawingBuffer;
    private Image image;
        
    
    public Canvas() {
 
	super();
	drawingBuffer = new DrawingBuffer();
    }
    

    public void paint(Graphics g) {
	super.paint(g);
	if (image==null) {
	    Graphics2D g2d = (Graphics2D)g;
	    int width = this.getWidth();
	    int height = this.getHeight();
	    image = g2d.getDeviceConfiguration().createCompatibleImage(width, height, Transparency.TRANSLUCENT);
	    g.setClip(0,0, width, height);
	}
	Graphics2D graphics = (Graphics2D)image.getGraphics();
	graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
	drawingBuffer.draw(graphics);
	drawingBuffer.flush();
	g.drawImage(image, 0, 0, null);
    }
    
    
    
    final static BasicStroke wideStroke = new BasicStroke(2.0f, BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND);
    public void draw(final Shape shape, final Color color) {
	
	Runnable drawer = new Runnable() {

		public void run() {
		    drawingBuffer.add(shape, color, wideStroke);
		    Rectangle clipRegion = wideStroke.createStrokedShape(shape).getBounds();
		    invalidate();
		    repaint(clipRegion.x-20, clipRegion.y-20, clipRegion.width+40, clipRegion.height+40);
		}
	    };
	SwingUtilities.invokeLater(drawer);
    }
    
}
